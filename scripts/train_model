import torch
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
import pandas as pd

def load_data(file_path):
    df = pd.read_csv(file_path)
    sentiment_map = {'positive': 2, 'neutral': 1, 'negative': 0}
    df['sentiment_label'] = df['sentiment'].map(sentiment_map)
    train_texts, val_texts, train_labels, val_labels = train_test_split(
        df['text'].tolist(), df['sentiment_label'].tolist(), test_size=0.2, random_state=42
    )
    return train_texts, val_texts, train_labels, val_labels

class SentimentDataset(torch.utils.data.Dataset):
    def __init__(self, texts, labels, tokenizer, max_length=128):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = str(self.texts[idx])
        label = self.labels[idx]
        encoding = self.tokenizer(
            text,
            add_special_tokens=True,
            max_length=self.max_length,
            padding="max_length",
            truncation=True,
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

def train_model(train_texts, val_texts, train_labels, val_labels, model_name="bert-base-uncased"):
    tokenizer = BertTokenizer.from_pretrained(model_name)
    train_dataset = SentimentDataset(train_texts, train_labels, tokenizer)
    val_dataset = SentimentDataset(val_texts, val_labels, tokenizer)

    model = BertForSequenceClassification.from_pretrained(model_name, num_labels=3)
    training_args = TrainingArguments(
        output_dir='./results',
        evaluation_strategy="epoch",
        per_device_train_batch_size=16,
        per_device_eval_batch_size=16,
        num_train_epochs=3,
        weight_decay=0.01,
        logging_dir='./logs',
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=val_dataset
    )

    trainer.train()
    model.save_pretrained("./sentiment_model")
    tokenizer.save_pretrained("./sentiment_model")

if __name__ == "__main__":
    train_texts, val_texts, train_labels, val_labels = load_data("train.csv")
    train_model(train_texts, val_texts, train_labels, val_labels)
    print("Model training complete and saved.")
